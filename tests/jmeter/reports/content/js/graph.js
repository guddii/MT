/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 132.0, "minX": 0.0, "maxY": 2840.0, "series": [{"data": [[0.0, 133.0], [0.1, 133.0], [0.2, 137.0], [0.3, 137.0], [0.4, 138.0], [0.5, 138.0], [0.6, 138.0], [0.7, 138.0], [0.8, 139.0], [0.9, 139.0], [1.0, 140.0], [1.1, 140.0], [1.2, 140.0], [1.3, 140.0], [1.4, 140.0], [1.5, 140.0], [1.6, 141.0], [1.7, 141.0], [1.8, 142.0], [1.9, 142.0], [2.0, 143.0], [2.1, 143.0], [2.2, 144.0], [2.3, 144.0], [2.4, 144.0], [2.5, 144.0], [2.6, 145.0], [2.7, 145.0], [2.8, 145.0], [2.9, 146.0], [3.0, 146.0], [3.1, 147.0], [3.2, 147.0], [3.3, 147.0], [3.4, 147.0], [3.5, 148.0], [3.6, 148.0], [3.7, 149.0], [3.8, 149.0], [3.9, 149.0], [4.0, 149.0], [4.1, 151.0], [4.2, 151.0], [4.3, 151.0], [4.4, 151.0], [4.5, 151.0], [4.6, 151.0], [4.7, 152.0], [4.8, 152.0], [4.9, 152.0], [5.0, 152.0], [5.1, 153.0], [5.2, 153.0], [5.3, 154.0], [5.4, 154.0], [5.5, 155.0], [5.6, 155.0], [5.7, 155.0], [5.8, 155.0], [5.9, 156.0], [6.0, 156.0], [6.1, 156.0], [6.2, 156.0], [6.3, 157.0], [6.4, 157.0], [6.5, 158.0], [6.6, 158.0], [6.7, 158.0], [6.8, 158.0], [6.9, 159.0], [7.0, 159.0], [7.1, 160.0], [7.2, 160.0], [7.3, 161.0], [7.4, 161.0], [7.5, 162.0], [7.6, 162.0], [7.7, 162.0], [7.8, 162.0], [7.9, 163.0], [8.0, 163.0], [8.1, 167.0], [8.2, 167.0], [8.3, 168.0], [8.4, 168.0], [8.5, 169.0], [8.6, 169.0], [8.7, 172.0], [8.8, 175.0], [8.9, 175.0], [9.0, 181.0], [9.1, 181.0], [9.2, 181.0], [9.3, 181.0], [9.4, 182.0], [9.5, 182.0], [9.6, 184.0], [9.7, 184.0], [9.8, 192.0], [9.9, 192.0], [10.0, 205.0], [10.1, 205.0], [10.2, 212.0], [10.3, 212.0], [10.4, 221.0], [10.5, 221.0], [10.6, 221.0], [10.7, 221.0], [10.8, 223.0], [10.9, 223.0], [11.0, 235.0], [11.1, 235.0], [11.2, 299.0], [11.3, 299.0], [11.4, 301.0], [11.5, 301.0], [11.6, 305.0], [11.7, 305.0], [11.8, 307.0], [11.9, 307.0], [12.0, 309.0], [12.1, 309.0], [12.2, 310.0], [12.3, 310.0], [12.4, 312.0], [12.5, 312.0], [12.6, 313.0], [12.7, 313.0], [12.8, 314.0], [12.9, 314.0], [13.0, 315.0], [13.1, 315.0], [13.2, 315.0], [13.3, 315.0], [13.4, 316.0], [13.5, 316.0], [13.6, 318.0], [13.7, 318.0], [13.8, 319.0], [13.9, 319.0], [14.0, 321.0], [14.1, 321.0], [14.2, 322.0], [14.3, 322.0], [14.4, 322.0], [14.5, 322.0], [14.6, 329.0], [14.7, 329.0], [14.8, 330.0], [14.9, 330.0], [15.0, 330.0], [15.1, 330.0], [15.2, 330.0], [15.3, 330.0], [15.4, 332.0], [15.5, 332.0], [15.6, 332.0], [15.7, 332.0], [15.8, 334.0], [15.9, 334.0], [16.0, 336.0], [16.1, 336.0], [16.2, 336.0], [16.3, 336.0], [16.4, 337.0], [16.5, 337.0], [16.6, 340.0], [16.7, 340.0], [16.8, 342.0], [16.9, 342.0], [17.0, 344.0], [17.1, 344.0], [17.2, 344.0], [17.3, 344.0], [17.4, 349.0], [17.5, 349.0], [17.6, 351.0], [17.7, 351.0], [17.8, 351.0], [17.9, 351.0], [18.0, 351.0], [18.1, 351.0], [18.2, 352.0], [18.3, 352.0], [18.4, 353.0], [18.5, 353.0], [18.6, 354.0], [18.7, 354.0], [18.8, 355.0], [18.9, 355.0], [19.0, 355.0], [19.1, 355.0], [19.2, 358.0], [19.3, 358.0], [19.4, 358.0], [19.5, 358.0], [19.6, 360.0], [19.7, 360.0], [19.8, 362.0], [19.9, 362.0], [20.0, 362.0], [20.1, 362.0], [20.2, 363.0], [20.3, 363.0], [20.4, 365.0], [20.5, 365.0], [20.6, 366.0], [20.7, 366.0], [20.8, 366.0], [20.9, 366.0], [21.0, 367.0], [21.1, 367.0], [21.2, 367.0], [21.3, 367.0], [21.4, 368.0], [21.5, 368.0], [21.6, 368.0], [21.7, 368.0], [21.8, 369.0], [21.9, 369.0], [22.0, 370.0], [22.1, 370.0], [22.2, 370.0], [22.3, 370.0], [22.4, 372.0], [22.5, 372.0], [22.6, 373.0], [22.7, 373.0], [22.8, 374.0], [22.9, 374.0], [23.0, 374.0], [23.1, 374.0], [23.2, 374.0], [23.3, 374.0], [23.4, 375.0], [23.5, 375.0], [23.6, 375.0], [23.7, 375.0], [23.8, 376.0], [23.9, 376.0], [24.0, 376.0], [24.1, 376.0], [24.2, 376.0], [24.3, 376.0], [24.4, 377.0], [24.5, 377.0], [24.6, 377.0], [24.7, 377.0], [24.8, 377.0], [24.9, 377.0], [25.0, 377.0], [25.1, 377.0], [25.2, 377.0], [25.3, 377.0], [25.4, 378.0], [25.5, 378.0], [25.6, 378.0], [25.7, 378.0], [25.8, 378.0], [25.9, 378.0], [26.0, 378.0], [26.1, 378.0], [26.2, 379.0], [26.3, 379.0], [26.4, 380.0], [26.5, 380.0], [26.6, 381.0], [26.7, 381.0], [26.8, 382.0], [26.9, 382.0], [27.0, 384.0], [27.1, 384.0], [27.2, 384.0], [27.3, 384.0], [27.4, 384.0], [27.5, 384.0], [27.6, 386.0], [27.7, 386.0], [27.8, 386.0], [27.9, 386.0], [28.0, 386.0], [28.1, 386.0], [28.2, 387.0], [28.3, 387.0], [28.4, 387.0], [28.5, 387.0], [28.6, 387.0], [28.7, 387.0], [28.8, 387.0], [28.9, 387.0], [29.0, 388.0], [29.1, 388.0], [29.2, 389.0], [29.3, 389.0], [29.4, 390.0], [29.5, 390.0], [29.6, 390.0], [29.7, 390.0], [29.8, 391.0], [29.9, 391.0], [30.0, 391.0], [30.1, 391.0], [30.2, 393.0], [30.3, 393.0], [30.4, 393.0], [30.5, 393.0], [30.6, 393.0], [30.7, 393.0], [30.8, 394.0], [30.9, 394.0], [31.0, 395.0], [31.1, 395.0], [31.2, 395.0], [31.3, 395.0], [31.4, 396.0], [31.5, 396.0], [31.6, 396.0], [31.7, 396.0], [31.8, 397.0], [31.9, 397.0], [32.0, 397.0], [32.1, 397.0], [32.2, 398.0], [32.3, 398.0], [32.4, 399.0], [32.5, 399.0], [32.6, 399.0], [32.7, 399.0], [32.8, 400.0], [32.9, 400.0], [33.0, 400.0], [33.1, 400.0], [33.2, 401.0], [33.3, 401.0], [33.4, 402.0], [33.5, 402.0], [33.6, 402.0], [33.7, 402.0], [33.8, 402.0], [33.9, 402.0], [34.0, 403.0], [34.1, 403.0], [34.2, 403.0], [34.3, 403.0], [34.4, 404.0], [34.5, 404.0], [34.6, 404.0], [34.7, 404.0], [34.8, 409.0], [34.9, 409.0], [35.0, 414.0], [35.1, 414.0], [35.2, 415.0], [35.3, 415.0], [35.4, 416.0], [35.5, 416.0], [35.6, 416.0], [35.7, 416.0], [35.8, 420.0], [35.9, 420.0], [36.0, 421.0], [36.1, 421.0], [36.2, 422.0], [36.3, 422.0], [36.4, 422.0], [36.5, 422.0], [36.6, 423.0], [36.7, 423.0], [36.8, 424.0], [36.9, 424.0], [37.0, 424.0], [37.1, 424.0], [37.2, 425.0], [37.3, 425.0], [37.4, 425.0], [37.5, 425.0], [37.6, 426.0], [37.7, 426.0], [37.8, 426.0], [37.9, 426.0], [38.0, 427.0], [38.1, 427.0], [38.2, 428.0], [38.3, 428.0], [38.4, 429.0], [38.5, 429.0], [38.6, 429.0], [38.7, 429.0], [38.8, 432.0], [38.9, 432.0], [39.0, 433.0], [39.1, 433.0], [39.2, 433.0], [39.3, 433.0], [39.4, 434.0], [39.5, 434.0], [39.6, 435.0], [39.7, 435.0], [39.8, 436.0], [39.9, 436.0], [40.0, 439.0], [40.1, 439.0], [40.2, 440.0], [40.3, 440.0], [40.4, 441.0], [40.5, 441.0], [40.6, 441.0], [40.7, 441.0], [40.8, 442.0], [40.9, 442.0], [41.0, 444.0], [41.1, 444.0], [41.2, 445.0], [41.3, 445.0], [41.4, 445.0], [41.5, 445.0], [41.6, 447.0], [41.7, 447.0], [41.8, 448.0], [41.9, 448.0], [42.0, 452.0], [42.1, 452.0], [42.2, 453.0], [42.3, 453.0], [42.4, 453.0], [42.5, 454.0], [42.6, 454.0], [42.7, 454.0], [42.8, 454.0], [42.9, 454.0], [43.0, 454.0], [43.1, 455.0], [43.2, 455.0], [43.3, 455.0], [43.4, 455.0], [43.5, 455.0], [43.6, 455.0], [43.7, 456.0], [43.8, 456.0], [43.9, 456.0], [44.0, 456.0], [44.1, 457.0], [44.2, 457.0], [44.3, 458.0], [44.4, 458.0], [44.5, 460.0], [44.6, 460.0], [44.7, 462.0], [44.8, 462.0], [44.9, 463.0], [45.0, 463.0], [45.1, 463.0], [45.2, 463.0], [45.3, 464.0], [45.4, 464.0], [45.5, 464.0], [45.6, 464.0], [45.7, 466.0], [45.8, 466.0], [45.9, 467.0], [46.0, 467.0], [46.1, 470.0], [46.2, 470.0], [46.3, 472.0], [46.4, 472.0], [46.5, 477.0], [46.6, 477.0], [46.7, 480.0], [46.8, 480.0], [46.9, 480.0], [47.0, 480.0], [47.1, 482.0], [47.2, 482.0], [47.3, 486.0], [47.4, 486.0], [47.5, 487.0], [47.6, 487.0], [47.7, 489.0], [47.8, 489.0], [47.9, 489.0], [48.0, 489.0], [48.1, 489.0], [48.2, 489.0], [48.3, 491.0], [48.4, 491.0], [48.5, 492.0], [48.6, 492.0], [48.7, 492.0], [48.8, 492.0], [48.9, 493.0], [49.0, 493.0], [49.1, 494.0], [49.2, 494.0], [49.3, 495.0], [49.4, 495.0], [49.5, 496.0], [49.6, 496.0], [49.7, 496.0], [49.8, 496.0], [49.9, 500.0], [50.0, 500.0], [50.1, 504.0], [50.2, 504.0], [50.3, 508.0], [50.4, 508.0], [50.5, 509.0], [50.6, 509.0], [50.7, 509.0], [50.8, 509.0], [50.9, 509.0], [51.0, 509.0], [51.1, 514.0], [51.2, 514.0], [51.3, 514.0], [51.4, 514.0], [51.5, 519.0], [51.6, 519.0], [51.7, 519.0], [51.8, 519.0], [51.9, 522.0], [52.0, 522.0], [52.1, 524.0], [52.2, 524.0], [52.3, 525.0], [52.4, 525.0], [52.5, 527.0], [52.6, 527.0], [52.7, 528.0], [52.8, 528.0], [52.9, 534.0], [53.0, 534.0], [53.1, 535.0], [53.2, 535.0], [53.3, 536.0], [53.4, 536.0], [53.5, 536.0], [53.6, 536.0], [53.7, 545.0], [53.8, 545.0], [53.9, 546.0], [54.0, 546.0], [54.1, 548.0], [54.2, 548.0], [54.3, 551.0], [54.4, 551.0], [54.5, 551.0], [54.6, 551.0], [54.7, 552.0], [54.8, 552.0], [54.9, 556.0], [55.0, 556.0], [55.1, 561.0], [55.2, 561.0], [55.3, 561.0], [55.4, 561.0], [55.5, 565.0], [55.6, 565.0], [55.7, 566.0], [55.8, 566.0], [55.9, 570.0], [56.0, 570.0], [56.1, 572.0], [56.2, 572.0], [56.3, 573.0], [56.4, 573.0], [56.5, 577.0], [56.6, 577.0], [56.7, 580.0], [56.8, 580.0], [56.9, 583.0], [57.0, 583.0], [57.1, 586.0], [57.2, 586.0], [57.3, 588.0], [57.4, 588.0], [57.5, 591.0], [57.6, 591.0], [57.7, 591.0], [57.8, 591.0], [57.9, 591.0], [58.0, 591.0], [58.1, 594.0], [58.2, 594.0], [58.3, 599.0], [58.4, 599.0], [58.5, 607.0], [58.6, 607.0], [58.7, 609.0], [58.8, 609.0], [58.9, 609.0], [59.0, 609.0], [59.1, 610.0], [59.2, 610.0], [59.3, 616.0], [59.4, 616.0], [59.5, 617.0], [59.6, 617.0], [59.7, 617.0], [59.8, 617.0], [59.9, 618.0], [60.0, 618.0], [60.1, 625.0], [60.2, 625.0], [60.3, 625.0], [60.4, 625.0], [60.5, 626.0], [60.6, 626.0], [60.7, 627.0], [60.8, 627.0], [60.9, 627.0], [61.0, 627.0], [61.1, 633.0], [61.2, 633.0], [61.3, 634.0], [61.4, 634.0], [61.5, 642.0], [61.6, 642.0], [61.7, 642.0], [61.8, 642.0], [61.9, 642.0], [62.0, 642.0], [62.1, 644.0], [62.2, 644.0], [62.3, 645.0], [62.4, 645.0], [62.5, 647.0], [62.6, 647.0], [62.7, 648.0], [62.8, 648.0], [62.9, 652.0], [63.0, 652.0], [63.1, 654.0], [63.2, 654.0], [63.3, 655.0], [63.4, 655.0], [63.5, 657.0], [63.6, 657.0], [63.7, 668.0], [63.8, 668.0], [63.9, 669.0], [64.0, 669.0], [64.1, 670.0], [64.2, 670.0], [64.3, 677.0], [64.4, 677.0], [64.5, 686.0], [64.6, 686.0], [64.7, 692.0], [64.8, 692.0], [64.9, 694.0], [65.0, 694.0], [65.1, 697.0], [65.2, 697.0], [65.3, 698.0], [65.4, 698.0], [65.5, 702.0], [65.6, 702.0], [65.7, 710.0], [65.8, 710.0], [65.9, 714.0], [66.0, 714.0], [66.1, 716.0], [66.2, 716.0], [66.3, 716.0], [66.4, 716.0], [66.5, 720.0], [66.6, 720.0], [66.7, 722.0], [66.8, 722.0], [66.9, 723.0], [67.0, 723.0], [67.1, 729.0], [67.2, 729.0], [67.3, 731.0], [67.4, 731.0], [67.5, 733.0], [67.6, 733.0], [67.7, 746.0], [67.8, 746.0], [67.9, 749.0], [68.0, 749.0], [68.1, 751.0], [68.2, 751.0], [68.3, 752.0], [68.4, 752.0], [68.5, 753.0], [68.6, 753.0], [68.7, 758.0], [68.8, 758.0], [68.9, 769.0], [69.0, 769.0], [69.1, 777.0], [69.2, 777.0], [69.3, 778.0], [69.4, 778.0], [69.5, 780.0], [69.6, 780.0], [69.7, 782.0], [69.8, 782.0], [69.9, 783.0], [70.0, 783.0], [70.1, 784.0], [70.2, 784.0], [70.3, 793.0], [70.4, 793.0], [70.5, 795.0], [70.6, 795.0], [70.7, 798.0], [70.8, 798.0], [70.9, 811.0], [71.0, 811.0], [71.1, 816.0], [71.2, 816.0], [71.3, 820.0], [71.4, 820.0], [71.5, 822.0], [71.6, 822.0], [71.7, 823.0], [71.8, 823.0], [71.9, 830.0], [72.0, 830.0], [72.1, 836.0], [72.2, 836.0], [72.3, 838.0], [72.4, 838.0], [72.5, 838.0], [72.6, 838.0], [72.7, 839.0], [72.8, 839.0], [72.9, 844.0], [73.0, 844.0], [73.1, 850.0], [73.2, 850.0], [73.3, 852.0], [73.4, 852.0], [73.5, 859.0], [73.6, 859.0], [73.7, 860.0], [73.8, 860.0], [73.9, 865.0], [74.0, 865.0], [74.1, 868.0], [74.2, 868.0], [74.3, 876.0], [74.4, 876.0], [74.5, 877.0], [74.6, 877.0], [74.7, 878.0], [74.8, 878.0], [74.9, 918.0], [75.0, 918.0], [75.1, 921.0], [75.2, 921.0], [75.3, 958.0], [75.4, 958.0], [75.5, 975.0], [75.6, 975.0], [75.7, 979.0], [75.8, 979.0], [75.9, 986.0], [76.0, 986.0], [76.1, 991.0], [76.2, 991.0], [76.3, 998.0], [76.4, 998.0], [76.5, 1013.0], [76.6, 1013.0], [76.7, 1014.0], [76.8, 1014.0], [76.9, 1015.0], [77.0, 1015.0], [77.1, 1027.0], [77.2, 1027.0], [77.3, 1030.0], [77.4, 1030.0], [77.5, 1034.0], [77.6, 1034.0], [77.7, 1038.0], [77.8, 1038.0], [77.9, 1060.0], [78.0, 1060.0], [78.1, 1072.0], [78.2, 1072.0], [78.3, 1084.0], [78.4, 1084.0], [78.5, 1091.0], [78.6, 1091.0], [78.7, 1092.0], [78.8, 1092.0], [78.9, 1121.0], [79.0, 1121.0], [79.1, 1149.0], [79.2, 1149.0], [79.3, 1153.0], [79.4, 1153.0], [79.5, 1155.0], [79.6, 1155.0], [79.7, 1162.0], [79.8, 1162.0], [79.9, 1174.0], [80.0, 1174.0], [80.1, 1212.0], [80.2, 1212.0], [80.3, 1220.0], [80.4, 1220.0], [80.5, 1227.0], [80.6, 1227.0], [80.7, 1237.0], [80.8, 1237.0], [80.9, 1238.0], [81.0, 1238.0], [81.1, 1261.0], [81.2, 1261.0], [81.3, 1271.0], [81.4, 1271.0], [81.5, 1271.0], [81.6, 1271.0], [81.7, 1274.0], [81.8, 1274.0], [81.9, 1274.0], [82.0, 1274.0], [82.1, 1303.0], [82.2, 1303.0], [82.3, 1307.0], [82.4, 1307.0], [82.5, 1319.0], [82.6, 1319.0], [82.7, 1346.0], [82.8, 1346.0], [82.9, 1347.0], [83.0, 1347.0], [83.1, 1370.0], [83.2, 1370.0], [83.3, 1376.0], [83.4, 1376.0], [83.5, 1381.0], [83.6, 1381.0], [83.7, 1387.0], [83.8, 1387.0], [83.9, 1388.0], [84.0, 1388.0], [84.1, 1388.0], [84.2, 1388.0], [84.3, 1389.0], [84.4, 1389.0], [84.5, 1400.0], [84.6, 1400.0], [84.7, 1403.0], [84.8, 1403.0], [84.9, 1421.0], [85.0, 1421.0], [85.1, 1427.0], [85.2, 1427.0], [85.3, 1432.0], [85.4, 1432.0], [85.5, 1458.0], [85.6, 1458.0], [85.7, 1461.0], [85.8, 1461.0], [85.9, 1469.0], [86.0, 1469.0], [86.1, 1470.0], [86.2, 1470.0], [86.3, 1481.0], [86.4, 1481.0], [86.5, 1484.0], [86.6, 1484.0], [86.7, 1502.0], [86.8, 1502.0], [86.9, 1517.0], [87.0, 1517.0], [87.1, 1534.0], [87.2, 1534.0], [87.3, 1539.0], [87.4, 1539.0], [87.5, 1541.0], [87.6, 1541.0], [87.7, 1555.0], [87.8, 1555.0], [87.9, 1565.0], [88.0, 1565.0], [88.1, 1568.0], [88.2, 1568.0], [88.3, 1574.0], [88.4, 1574.0], [88.5, 1591.0], [88.6, 1591.0], [88.7, 1595.0], [88.8, 1595.0], [88.9, 1627.0], [89.0, 1627.0], [89.1, 1629.0], [89.2, 1629.0], [89.3, 1630.0], [89.4, 1630.0], [89.5, 1640.0], [89.6, 1640.0], [89.7, 1685.0], [89.8, 1685.0], [89.9, 1690.0], [90.0, 1690.0], [90.1, 1695.0], [90.2, 1695.0], [90.3, 1709.0], [90.4, 1709.0], [90.5, 1727.0], [90.6, 1727.0], [90.7, 1727.0], [90.8, 1727.0], [90.9, 1751.0], [91.0, 1751.0], [91.1, 1764.0], [91.2, 1764.0], [91.3, 1770.0], [91.4, 1770.0], [91.5, 1770.0], [91.6, 1770.0], [91.7, 1779.0], [91.8, 1779.0], [91.9, 1786.0], [92.0, 1786.0], [92.1, 1819.0], [92.2, 1819.0], [92.3, 1819.0], [92.4, 1819.0], [92.5, 1840.0], [92.6, 1840.0], [92.7, 1843.0], [92.8, 1843.0], [92.9, 1856.0], [93.0, 1856.0], [93.1, 1864.0], [93.2, 1864.0], [93.3, 1878.0], [93.4, 1878.0], [93.5, 1884.0], [93.6, 1884.0], [93.7, 1890.0], [93.8, 1890.0], [93.9, 1899.0], [94.0, 1899.0], [94.1, 1909.0], [94.2, 1909.0], [94.3, 1927.0], [94.4, 1927.0], [94.5, 1927.0], [94.6, 1927.0], [94.7, 1938.0], [94.8, 1938.0], [94.9, 1947.0], [95.0, 1947.0], [95.1, 1948.0], [95.2, 1948.0], [95.3, 1951.0], [95.4, 1951.0], [95.5, 1959.0], [95.6, 1959.0], [95.7, 1970.0], [95.8, 1970.0], [95.9, 1976.0], [96.0, 1976.0], [96.1, 1980.0], [96.2, 1980.0], [96.3, 1988.0], [96.4, 1988.0], [96.5, 2002.0], [96.6, 2002.0], [96.7, 2024.0], [96.8, 2024.0], [96.9, 2059.0], [97.0, 2059.0], [97.1, 2059.0], [97.2, 2059.0], [97.3, 2078.0], [97.4, 2078.0], [97.5, 2078.0], [97.6, 2078.0], [97.7, 2080.0], [97.8, 2080.0], [97.9, 2175.0], [98.0, 2175.0], [98.1, 2175.0], [98.2, 2175.0], [98.3, 2226.0], [98.4, 2226.0], [98.5, 2231.0], [98.6, 2231.0], [98.7, 2256.0], [98.8, 2256.0], [98.9, 2289.0], [99.0, 2289.0], [99.1, 2318.0], [99.2, 2318.0], [99.3, 2327.0], [99.4, 2327.0], [99.5, 2416.0], [99.6, 2416.0], [99.7, 2433.0], [99.8, 2433.0], [99.9, 2840.0], [100.0, 2840.0]], "isOverall": false, "label": "Read WebID HTTP Request without Logging", "isController": false}, {"data": [[0.0, 132.0], [0.1, 132.0], [0.2, 137.0], [0.3, 137.0], [0.4, 137.0], [0.5, 137.0], [0.6, 137.0], [0.7, 138.0], [0.8, 139.0], [0.9, 139.0], [1.0, 141.0], [1.1, 141.0], [1.2, 143.0], [1.3, 143.0], [1.4, 143.0], [1.5, 143.0], [1.6, 143.0], [1.7, 143.0], [1.8, 144.0], [1.9, 144.0], [2.0, 144.0], [2.1, 144.0], [2.2, 145.0], [2.3, 145.0], [2.4, 145.0], [2.5, 145.0], [2.6, 145.0], [2.7, 145.0], [2.8, 145.0], [2.9, 145.0], [3.0, 145.0], [3.1, 145.0], [3.2, 145.0], [3.3, 145.0], [3.4, 146.0], [3.5, 146.0], [3.6, 147.0], [3.7, 147.0], [3.8, 147.0], [3.9, 147.0], [4.0, 148.0], [4.1, 148.0], [4.2, 148.0], [4.3, 148.0], [4.4, 149.0], [4.5, 149.0], [4.6, 150.0], [4.7, 150.0], [4.8, 150.0], [4.9, 150.0], [5.0, 151.0], [5.1, 151.0], [5.2, 151.0], [5.3, 151.0], [5.4, 151.0], [5.5, 151.0], [5.6, 153.0], [5.7, 153.0], [5.8, 154.0], [5.9, 154.0], [6.0, 154.0], [6.1, 154.0], [6.2, 157.0], [6.3, 157.0], [6.4, 158.0], [6.5, 158.0], [6.6, 158.0], [6.7, 158.0], [6.8, 158.0], [6.9, 159.0], [7.0, 159.0], [7.1, 159.0], [7.2, 159.0], [7.3, 160.0], [7.4, 160.0], [7.5, 160.0], [7.6, 160.0], [7.7, 161.0], [7.8, 161.0], [7.9, 164.0], [8.0, 164.0], [8.1, 165.0], [8.2, 165.0], [8.3, 166.0], [8.4, 167.0], [8.5, 167.0], [8.6, 168.0], [8.7, 168.0], [8.8, 171.0], [8.9, 171.0], [9.0, 171.0], [9.1, 171.0], [9.2, 180.0], [9.3, 180.0], [9.4, 181.0], [9.5, 181.0], [9.6, 182.0], [9.7, 182.0], [9.8, 183.0], [9.9, 183.0], [10.0, 186.0], [10.1, 186.0], [10.2, 199.0], [10.3, 199.0], [10.4, 201.0], [10.5, 201.0], [10.6, 202.0], [10.7, 202.0], [10.8, 212.0], [10.9, 212.0], [11.0, 215.0], [11.1, 215.0], [11.2, 215.0], [11.3, 215.0], [11.4, 233.0], [11.5, 233.0], [11.6, 301.0], [11.7, 301.0], [11.8, 310.0], [11.9, 310.0], [12.0, 314.0], [12.1, 314.0], [12.2, 315.0], [12.3, 315.0], [12.4, 315.0], [12.5, 315.0], [12.6, 315.0], [12.7, 315.0], [12.8, 317.0], [12.9, 317.0], [13.0, 321.0], [13.1, 321.0], [13.2, 321.0], [13.3, 321.0], [13.4, 324.0], [13.5, 324.0], [13.6, 324.0], [13.7, 324.0], [13.8, 324.0], [13.9, 324.0], [14.0, 324.0], [14.1, 324.0], [14.2, 325.0], [14.3, 325.0], [14.4, 326.0], [14.5, 326.0], [14.6, 329.0], [14.7, 329.0], [14.8, 329.0], [14.9, 329.0], [15.0, 329.0], [15.1, 329.0], [15.2, 330.0], [15.3, 330.0], [15.4, 331.0], [15.5, 331.0], [15.6, 331.0], [15.7, 331.0], [15.8, 331.0], [15.9, 331.0], [16.0, 333.0], [16.1, 333.0], [16.2, 335.0], [16.3, 335.0], [16.4, 337.0], [16.5, 337.0], [16.6, 337.0], [16.7, 337.0], [16.8, 337.0], [16.9, 337.0], [17.0, 338.0], [17.1, 338.0], [17.2, 341.0], [17.3, 341.0], [17.4, 342.0], [17.5, 342.0], [17.6, 343.0], [17.7, 343.0], [17.8, 343.0], [17.9, 343.0], [18.0, 344.0], [18.1, 344.0], [18.2, 345.0], [18.3, 345.0], [18.4, 346.0], [18.5, 346.0], [18.6, 351.0], [18.7, 351.0], [18.8, 355.0], [18.9, 355.0], [19.0, 355.0], [19.1, 355.0], [19.2, 356.0], [19.3, 356.0], [19.4, 358.0], [19.5, 358.0], [19.6, 359.0], [19.7, 359.0], [19.8, 359.0], [19.9, 359.0], [20.0, 361.0], [20.1, 361.0], [20.2, 363.0], [20.3, 363.0], [20.4, 363.0], [20.5, 363.0], [20.6, 364.0], [20.7, 364.0], [20.8, 365.0], [20.9, 365.0], [21.0, 366.0], [21.1, 366.0], [21.2, 366.0], [21.3, 366.0], [21.4, 367.0], [21.5, 367.0], [21.6, 367.0], [21.7, 367.0], [21.8, 368.0], [21.9, 368.0], [22.0, 368.0], [22.1, 368.0], [22.2, 370.0], [22.3, 370.0], [22.4, 372.0], [22.5, 372.0], [22.6, 373.0], [22.7, 373.0], [22.8, 373.0], [22.9, 373.0], [23.0, 373.0], [23.1, 373.0], [23.2, 374.0], [23.3, 374.0], [23.4, 374.0], [23.5, 374.0], [23.6, 375.0], [23.7, 375.0], [23.8, 375.0], [23.9, 375.0], [24.0, 375.0], [24.1, 375.0], [24.2, 375.0], [24.3, 375.0], [24.4, 377.0], [24.5, 377.0], [24.6, 378.0], [24.7, 378.0], [24.8, 379.0], [24.9, 379.0], [25.0, 379.0], [25.1, 379.0], [25.2, 380.0], [25.3, 380.0], [25.4, 382.0], [25.5, 382.0], [25.6, 383.0], [25.7, 383.0], [25.8, 384.0], [25.9, 384.0], [26.0, 385.0], [26.1, 385.0], [26.2, 385.0], [26.3, 385.0], [26.4, 387.0], [26.5, 387.0], [26.6, 387.0], [26.7, 387.0], [26.8, 387.0], [26.9, 387.0], [27.0, 387.0], [27.1, 387.0], [27.2, 388.0], [27.3, 388.0], [27.4, 388.0], [27.5, 388.0], [27.6, 388.0], [27.7, 388.0], [27.8, 389.0], [27.9, 389.0], [28.0, 390.0], [28.1, 390.0], [28.2, 390.0], [28.3, 390.0], [28.4, 391.0], [28.5, 391.0], [28.6, 391.0], [28.7, 391.0], [28.8, 391.0], [28.9, 391.0], [29.0, 392.0], [29.1, 392.0], [29.2, 393.0], [29.3, 393.0], [29.4, 395.0], [29.5, 395.0], [29.6, 396.0], [29.7, 396.0], [29.8, 399.0], [29.9, 399.0], [30.0, 400.0], [30.1, 400.0], [30.2, 401.0], [30.3, 401.0], [30.4, 402.0], [30.5, 402.0], [30.6, 402.0], [30.7, 402.0], [30.8, 405.0], [30.9, 405.0], [31.0, 406.0], [31.1, 406.0], [31.2, 407.0], [31.3, 407.0], [31.4, 408.0], [31.5, 408.0], [31.6, 409.0], [31.7, 409.0], [31.8, 409.0], [31.9, 409.0], [32.0, 411.0], [32.1, 411.0], [32.2, 412.0], [32.3, 412.0], [32.4, 415.0], [32.5, 415.0], [32.6, 417.0], [32.7, 417.0], [32.8, 418.0], [32.9, 418.0], [33.0, 418.0], [33.1, 418.0], [33.2, 418.0], [33.3, 418.0], [33.4, 419.0], [33.5, 419.0], [33.6, 420.0], [33.7, 420.0], [33.8, 420.0], [33.9, 420.0], [34.0, 421.0], [34.1, 421.0], [34.2, 421.0], [34.3, 421.0], [34.4, 421.0], [34.5, 421.0], [34.6, 422.0], [34.7, 422.0], [34.8, 423.0], [34.9, 423.0], [35.0, 424.0], [35.1, 424.0], [35.2, 424.0], [35.3, 424.0], [35.4, 425.0], [35.5, 425.0], [35.6, 427.0], [35.7, 427.0], [35.8, 430.0], [35.9, 430.0], [36.0, 430.0], [36.1, 430.0], [36.2, 430.0], [36.3, 430.0], [36.4, 430.0], [36.5, 430.0], [36.6, 431.0], [36.7, 431.0], [36.8, 433.0], [36.9, 433.0], [37.0, 433.0], [37.1, 433.0], [37.2, 433.0], [37.3, 433.0], [37.4, 434.0], [37.5, 434.0], [37.6, 437.0], [37.7, 437.0], [37.8, 440.0], [37.9, 440.0], [38.0, 441.0], [38.1, 441.0], [38.2, 441.0], [38.3, 441.0], [38.4, 441.0], [38.5, 441.0], [38.6, 442.0], [38.7, 442.0], [38.8, 444.0], [38.9, 444.0], [39.0, 445.0], [39.1, 445.0], [39.2, 445.0], [39.3, 445.0], [39.4, 447.0], [39.5, 447.0], [39.6, 447.0], [39.7, 447.0], [39.8, 448.0], [39.9, 448.0], [40.0, 448.0], [40.1, 448.0], [40.2, 449.0], [40.3, 449.0], [40.4, 450.0], [40.5, 450.0], [40.6, 450.0], [40.7, 450.0], [40.8, 451.0], [40.9, 451.0], [41.0, 454.0], [41.1, 454.0], [41.2, 454.0], [41.3, 454.0], [41.4, 456.0], [41.5, 456.0], [41.6, 456.0], [41.7, 456.0], [41.8, 457.0], [41.9, 457.0], [42.0, 458.0], [42.1, 458.0], [42.2, 458.0], [42.3, 458.0], [42.4, 459.0], [42.5, 459.0], [42.6, 459.0], [42.7, 459.0], [42.8, 460.0], [42.9, 460.0], [43.0, 460.0], [43.1, 460.0], [43.2, 461.0], [43.3, 461.0], [43.4, 463.0], [43.5, 463.0], [43.6, 463.0], [43.7, 463.0], [43.8, 466.0], [43.9, 466.0], [44.0, 467.0], [44.1, 467.0], [44.2, 470.0], [44.3, 470.0], [44.4, 470.0], [44.5, 470.0], [44.6, 470.0], [44.7, 470.0], [44.8, 470.0], [44.9, 470.0], [45.0, 471.0], [45.1, 471.0], [45.2, 472.0], [45.3, 472.0], [45.4, 472.0], [45.5, 472.0], [45.6, 473.0], [45.7, 473.0], [45.8, 474.0], [45.9, 474.0], [46.0, 474.0], [46.1, 474.0], [46.2, 477.0], [46.3, 477.0], [46.4, 479.0], [46.5, 479.0], [46.6, 483.0], [46.7, 483.0], [46.8, 483.0], [46.9, 483.0], [47.0, 484.0], [47.1, 484.0], [47.2, 485.0], [47.3, 485.0], [47.4, 485.0], [47.5, 486.0], [47.6, 486.0], [47.7, 489.0], [47.8, 489.0], [47.9, 490.0], [48.0, 490.0], [48.1, 490.0], [48.2, 490.0], [48.3, 492.0], [48.4, 492.0], [48.5, 493.0], [48.6, 493.0], [48.7, 496.0], [48.8, 496.0], [48.9, 497.0], [49.0, 497.0], [49.1, 497.0], [49.2, 497.0], [49.3, 500.0], [49.4, 500.0], [49.5, 505.0], [49.6, 505.0], [49.7, 507.0], [49.8, 507.0], [49.9, 507.0], [50.0, 507.0], [50.1, 508.0], [50.2, 508.0], [50.3, 508.0], [50.4, 508.0], [50.5, 510.0], [50.6, 510.0], [50.7, 513.0], [50.8, 513.0], [50.9, 515.0], [51.0, 515.0], [51.1, 516.0], [51.2, 516.0], [51.3, 517.0], [51.4, 517.0], [51.5, 517.0], [51.6, 517.0], [51.7, 519.0], [51.8, 519.0], [51.9, 522.0], [52.0, 522.0], [52.1, 524.0], [52.2, 524.0], [52.3, 527.0], [52.4, 527.0], [52.5, 528.0], [52.6, 528.0], [52.7, 528.0], [52.8, 528.0], [52.9, 535.0], [53.0, 535.0], [53.1, 536.0], [53.2, 536.0], [53.3, 540.0], [53.4, 540.0], [53.5, 541.0], [53.6, 541.0], [53.7, 541.0], [53.8, 541.0], [53.9, 542.0], [54.0, 542.0], [54.1, 543.0], [54.2, 543.0], [54.3, 546.0], [54.4, 546.0], [54.5, 547.0], [54.6, 547.0], [54.7, 547.0], [54.8, 547.0], [54.9, 550.0], [55.0, 550.0], [55.1, 550.0], [55.2, 550.0], [55.3, 551.0], [55.4, 551.0], [55.5, 554.0], [55.6, 554.0], [55.7, 555.0], [55.8, 555.0], [55.9, 561.0], [56.0, 561.0], [56.1, 562.0], [56.2, 562.0], [56.3, 563.0], [56.4, 563.0], [56.5, 565.0], [56.6, 565.0], [56.7, 565.0], [56.8, 565.0], [56.9, 566.0], [57.0, 566.0], [57.1, 576.0], [57.2, 576.0], [57.3, 577.0], [57.4, 577.0], [57.5, 579.0], [57.6, 579.0], [57.7, 581.0], [57.8, 581.0], [57.9, 581.0], [58.0, 581.0], [58.1, 582.0], [58.2, 582.0], [58.3, 584.0], [58.4, 584.0], [58.5, 587.0], [58.6, 587.0], [58.7, 594.0], [58.8, 594.0], [58.9, 599.0], [59.0, 599.0], [59.1, 599.0], [59.2, 599.0], [59.3, 601.0], [59.4, 601.0], [59.5, 601.0], [59.6, 601.0], [59.7, 603.0], [59.8, 603.0], [59.9, 607.0], [60.0, 607.0], [60.1, 608.0], [60.2, 608.0], [60.3, 609.0], [60.4, 609.0], [60.5, 611.0], [60.6, 611.0], [60.7, 611.0], [60.8, 611.0], [60.9, 611.0], [61.0, 611.0], [61.1, 617.0], [61.2, 617.0], [61.3, 618.0], [61.4, 618.0], [61.5, 622.0], [61.6, 622.0], [61.7, 627.0], [61.8, 627.0], [61.9, 629.0], [62.0, 629.0], [62.1, 629.0], [62.2, 629.0], [62.3, 629.0], [62.4, 629.0], [62.5, 633.0], [62.6, 633.0], [62.7, 637.0], [62.8, 637.0], [62.9, 638.0], [63.0, 638.0], [63.1, 646.0], [63.2, 646.0], [63.3, 655.0], [63.4, 655.0], [63.5, 658.0], [63.6, 658.0], [63.7, 660.0], [63.8, 660.0], [63.9, 670.0], [64.0, 670.0], [64.1, 673.0], [64.2, 673.0], [64.3, 675.0], [64.4, 675.0], [64.5, 675.0], [64.6, 675.0], [64.7, 679.0], [64.8, 679.0], [64.9, 692.0], [65.0, 692.0], [65.1, 693.0], [65.2, 693.0], [65.3, 707.0], [65.4, 707.0], [65.5, 711.0], [65.6, 711.0], [65.7, 716.0], [65.8, 716.0], [65.9, 716.0], [66.0, 716.0], [66.1, 719.0], [66.2, 719.0], [66.3, 720.0], [66.4, 720.0], [66.5, 724.0], [66.6, 724.0], [66.7, 725.0], [66.8, 725.0], [66.9, 728.0], [67.0, 728.0], [67.1, 729.0], [67.2, 729.0], [67.3, 740.0], [67.4, 740.0], [67.5, 742.0], [67.6, 742.0], [67.7, 744.0], [67.8, 744.0], [67.9, 748.0], [68.0, 748.0], [68.1, 751.0], [68.2, 751.0], [68.3, 758.0], [68.4, 758.0], [68.5, 770.0], [68.6, 770.0], [68.7, 781.0], [68.8, 781.0], [68.9, 783.0], [69.0, 783.0], [69.1, 784.0], [69.2, 784.0], [69.3, 786.0], [69.4, 786.0], [69.5, 789.0], [69.6, 789.0], [69.7, 790.0], [69.8, 790.0], [69.9, 817.0], [70.0, 817.0], [70.1, 817.0], [70.2, 817.0], [70.3, 818.0], [70.4, 818.0], [70.5, 824.0], [70.6, 824.0], [70.7, 825.0], [70.8, 825.0], [70.9, 835.0], [71.0, 835.0], [71.1, 835.0], [71.2, 835.0], [71.3, 843.0], [71.4, 843.0], [71.5, 845.0], [71.6, 845.0], [71.7, 852.0], [71.8, 852.0], [71.9, 854.0], [72.0, 854.0], [72.1, 856.0], [72.2, 856.0], [72.3, 864.0], [72.4, 864.0], [72.5, 873.0], [72.6, 873.0], [72.7, 874.0], [72.8, 874.0], [72.9, 882.0], [73.0, 882.0], [73.1, 882.0], [73.2, 882.0], [73.3, 882.0], [73.4, 882.0], [73.5, 883.0], [73.6, 883.0], [73.7, 884.0], [73.8, 884.0], [73.9, 900.0], [74.0, 900.0], [74.1, 901.0], [74.2, 901.0], [74.3, 909.0], [74.4, 909.0], [74.5, 926.0], [74.6, 926.0], [74.7, 927.0], [74.8, 927.0], [74.9, 930.0], [75.0, 930.0], [75.1, 934.0], [75.2, 934.0], [75.3, 953.0], [75.4, 953.0], [75.5, 957.0], [75.6, 957.0], [75.7, 961.0], [75.8, 961.0], [75.9, 969.0], [76.0, 969.0], [76.1, 996.0], [76.2, 996.0], [76.3, 1000.0], [76.4, 1000.0], [76.5, 1007.0], [76.6, 1007.0], [76.7, 1007.0], [76.8, 1007.0], [76.9, 1021.0], [77.0, 1021.0], [77.1, 1026.0], [77.2, 1026.0], [77.3, 1049.0], [77.4, 1049.0], [77.5, 1064.0], [77.6, 1064.0], [77.7, 1064.0], [77.8, 1064.0], [77.9, 1068.0], [78.0, 1068.0], [78.1, 1071.0], [78.2, 1071.0], [78.3, 1074.0], [78.4, 1074.0], [78.5, 1075.0], [78.6, 1075.0], [78.7, 1076.0], [78.8, 1076.0], [78.9, 1077.0], [79.0, 1077.0], [79.1, 1087.0], [79.2, 1087.0], [79.3, 1088.0], [79.4, 1088.0], [79.5, 1091.0], [79.6, 1091.0], [79.7, 1091.0], [79.8, 1091.0], [79.9, 1116.0], [80.0, 1116.0], [80.1, 1125.0], [80.2, 1125.0], [80.3, 1139.0], [80.4, 1139.0], [80.5, 1142.0], [80.6, 1142.0], [80.7, 1142.0], [80.8, 1142.0], [80.9, 1146.0], [81.0, 1146.0], [81.1, 1160.0], [81.2, 1160.0], [81.3, 1168.0], [81.4, 1168.0], [81.5, 1182.0], [81.6, 1182.0], [81.7, 1190.0], [81.8, 1190.0], [81.9, 1195.0], [82.0, 1195.0], [82.1, 1204.0], [82.2, 1204.0], [82.3, 1209.0], [82.4, 1209.0], [82.5, 1236.0], [82.6, 1236.0], [82.7, 1287.0], [82.8, 1287.0], [82.9, 1293.0], [83.0, 1293.0], [83.1, 1302.0], [83.2, 1302.0], [83.3, 1329.0], [83.4, 1329.0], [83.5, 1330.0], [83.6, 1330.0], [83.7, 1346.0], [83.8, 1346.0], [83.9, 1361.0], [84.0, 1361.0], [84.1, 1362.0], [84.2, 1362.0], [84.3, 1379.0], [84.4, 1379.0], [84.5, 1393.0], [84.6, 1393.0], [84.7, 1401.0], [84.8, 1401.0], [84.9, 1415.0], [85.0, 1415.0], [85.1, 1417.0], [85.2, 1417.0], [85.3, 1431.0], [85.4, 1431.0], [85.5, 1433.0], [85.6, 1433.0], [85.7, 1436.0], [85.8, 1436.0], [85.9, 1442.0], [86.0, 1442.0], [86.1, 1443.0], [86.2, 1443.0], [86.3, 1455.0], [86.4, 1455.0], [86.5, 1455.0], [86.6, 1455.0], [86.7, 1468.0], [86.8, 1468.0], [86.9, 1469.0], [87.0, 1469.0], [87.1, 1488.0], [87.2, 1488.0], [87.3, 1488.0], [87.4, 1488.0], [87.5, 1506.0], [87.6, 1506.0], [87.7, 1509.0], [87.8, 1509.0], [87.9, 1520.0], [88.0, 1520.0], [88.1, 1527.0], [88.2, 1527.0], [88.3, 1540.0], [88.4, 1540.0], [88.5, 1561.0], [88.6, 1561.0], [88.7, 1581.0], [88.8, 1581.0], [88.9, 1583.0], [89.0, 1583.0], [89.1, 1605.0], [89.2, 1605.0], [89.3, 1625.0], [89.4, 1625.0], [89.5, 1636.0], [89.6, 1636.0], [89.7, 1640.0], [89.8, 1640.0], [89.9, 1643.0], [90.0, 1643.0], [90.1, 1657.0], [90.2, 1657.0], [90.3, 1661.0], [90.4, 1661.0], [90.5, 1661.0], [90.6, 1661.0], [90.7, 1668.0], [90.8, 1668.0], [90.9, 1701.0], [91.0, 1701.0], [91.1, 1729.0], [91.2, 1729.0], [91.3, 1731.0], [91.4, 1731.0], [91.5, 1734.0], [91.6, 1734.0], [91.7, 1754.0], [91.8, 1754.0], [91.9, 1789.0], [92.0, 1789.0], [92.1, 1807.0], [92.2, 1807.0], [92.3, 1809.0], [92.4, 1809.0], [92.5, 1873.0], [92.6, 1873.0], [92.7, 1956.0], [92.8, 1956.0], [92.9, 1972.0], [93.0, 1972.0], [93.1, 1992.0], [93.2, 1992.0], [93.3, 1995.0], [93.4, 1995.0], [93.5, 2023.0], [93.6, 2023.0], [93.7, 2048.0], [93.8, 2048.0], [93.9, 2069.0], [94.0, 2069.0], [94.1, 2082.0], [94.2, 2082.0], [94.3, 2093.0], [94.4, 2093.0], [94.5, 2109.0], [94.6, 2109.0], [94.7, 2121.0], [94.8, 2121.0], [94.9, 2126.0], [95.0, 2126.0], [95.1, 2135.0], [95.2, 2135.0], [95.3, 2152.0], [95.4, 2152.0], [95.5, 2155.0], [95.6, 2155.0], [95.7, 2171.0], [95.8, 2171.0], [95.9, 2196.0], [96.0, 2196.0], [96.1, 2199.0], [96.2, 2199.0], [96.3, 2245.0], [96.4, 2245.0], [96.5, 2288.0], [96.6, 2288.0], [96.7, 2295.0], [96.8, 2295.0], [96.9, 2312.0], [97.0, 2312.0], [97.1, 2314.0], [97.2, 2314.0], [97.3, 2341.0], [97.4, 2341.0], [97.5, 2342.0], [97.6, 2342.0], [97.7, 2342.0], [97.8, 2342.0], [97.9, 2389.0], [98.0, 2389.0], [98.1, 2391.0], [98.2, 2391.0], [98.3, 2391.0], [98.4, 2391.0], [98.5, 2398.0], [98.6, 2398.0], [98.7, 2425.0], [98.8, 2425.0], [98.9, 2490.0], [99.0, 2490.0], [99.1, 2494.0], [99.2, 2494.0], [99.3, 2503.0], [99.4, 2503.0], [99.5, 2632.0], [99.6, 2632.0], [99.7, 2637.0], [99.8, 2637.0], [99.9, 2640.0], [100.0, 2640.0]], "isOverall": false, "label": "Read WebID HTTP Request with Logging", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 107.0, "series": [{"data": [[600.0, 35.0], [700.0, 27.0], [800.0, 20.0], [900.0, 8.0], [1000.0, 12.0], [1100.0, 6.0], [1200.0, 10.0], [1300.0, 12.0], [1400.0, 11.0], [1500.0, 11.0], [1600.0, 7.0], [100.0, 50.0], [1700.0, 9.0], [1800.0, 10.0], [1900.0, 12.0], [2000.0, 7.0], [2100.0, 2.0], [2200.0, 4.0], [2300.0, 2.0], [2400.0, 2.0], [2800.0, 1.0], [200.0, 7.0], [300.0, 107.0], [400.0, 85.0], [500.0, 43.0]], "isOverall": false, "label": "Read WebID HTTP Request without Logging", "isController": false}, {"data": [[600.0, 30.0], [700.0, 23.0], [800.0, 20.0], [900.0, 12.0], [1000.0, 18.0], [1100.0, 11.0], [1200.0, 5.0], [1300.0, 8.0], [1400.0, 14.0], [1500.0, 8.0], [1600.0, 9.0], [100.0, 52.0], [1700.0, 6.0], [1800.0, 3.0], [1900.0, 4.0], [2000.0, 5.0], [2100.0, 9.0], [2200.0, 3.0], [2300.0, 9.0], [2400.0, 3.0], [2500.0, 1.0], [2600.0, 3.0], [200.0, 6.0], [300.0, 92.0], [400.0, 96.0], [500.0, 50.0]], "isOverall": false, "label": "Read WebID HTTP Request with Logging", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 496.0, "series": [{"data": [[0.0, 496.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 373.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 130.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.7133906E12, "maxY": 1.0, "series": [{"data": [[1.71339096E12, 1.0], [1.71339066E12, 1.0], [1.71339132E12, 1.0], [1.71339102E12, 1.0], [1.7133912E12, 1.0], [1.7133909E12, 1.0], [1.7133906E12, 1.0], [1.71339126E12, 1.0], [1.71339114E12, 1.0], [1.71339084E12, 1.0], [1.71339072E12, 1.0], [1.71339108E12, 1.0], [1.71339078E12, 1.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71339132E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 735.5259999999994, "minX": 1.0, "maxY": 745.1120000000006, "series": [{"data": [[1.0, 735.5259999999994]], "isOverall": false, "label": "Read WebID HTTP Request without Logging", "isController": false}, {"data": [[1.0, 735.5259999999994]], "isOverall": false, "label": "Read WebID HTTP Request without Logging-Aggregated", "isController": false}, {"data": [[1.0, 745.1120000000006]], "isOverall": false, "label": "Read WebID HTTP Request with Logging", "isController": false}, {"data": [[1.0, 745.1120000000006]], "isOverall": false, "label": "Read WebID HTTP Request with Logging-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 75.83333333333333, "minX": 1.7133906E12, "maxY": 3926.516666666667, "series": [{"data": [[1.71339096E12, 867.65], [1.71339066E12, 2626.4], [1.71339132E12, 3926.516666666667], [1.71339102E12, 750.4], [1.7133912E12, 3634.75], [1.7133909E12, 984.9], [1.7133906E12, 1711.85], [1.71339126E12, 3048.5], [1.71339114E12, 609.7], [1.71339084E12, 1172.5], [1.71339072E12, 1922.9], [1.71339108E12, 656.6], [1.71339078E12, 1547.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71339096E12, 108.06666666666666], [1.71339066E12, 326.6666666666667], [1.71339132E12, 487.23333333333335], [1.71339102E12, 93.33333333333333], [1.7133912E12, 451.93333333333334], [1.7133909E12, 122.5], [1.7133906E12, 212.76666666666668], [1.71339126E12, 379.1666666666667], [1.71339114E12, 75.83333333333333], [1.71339084E12, 145.83333333333334], [1.71339072E12, 239.16666666666666], [1.71339108E12, 81.66666666666667], [1.71339078E12, 192.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71339132E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 297.71428571428567, "minX": 1.7133906E12, "maxY": 2461.2307692307695, "series": [{"data": [[1.71339096E12, 1622.5], [1.71339066E12, 533.1071428571429], [1.71339132E12, 304.710843373494], [1.71339102E12, 1842.6875000000002], [1.7133912E12, 401.66666666666674], [1.7133909E12, 1417.4285714285713], [1.7133906E12, 434.2972972972972], [1.71339126E12, 455.2307692307693], [1.71339114E12, 2197.1538461538457], [1.71339084E12, 1233.1599999999996], [1.71339072E12, 727.9756097560975], [1.71339108E12, 1999.3571428571431], [1.71339078E12, 907.4242424242425]], "isOverall": false, "label": "Read WebID HTTP Request without Logging", "isController": false}, {"data": [[1.71339096E12, 1642.5263157894738], [1.71339066E12, 531.2678571428575], [1.71339132E12, 297.71428571428567], [1.71339102E12, 1896.4375], [1.7133912E12, 375.0], [1.7133909E12, 1421.0000000000002], [1.7133906E12, 410.4166666666667], [1.71339126E12, 464.36923076923085], [1.71339114E12, 2461.2307692307695], [1.71339084E12, 1168.88], [1.71339072E12, 736.5365853658536], [1.71339108E12, 2215.0714285714284], [1.71339078E12, 913.4545454545454]], "isOverall": false, "label": "Read WebID HTTP Request with Logging", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71339132E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 297.6190476190477, "minX": 1.7133906E12, "maxY": 2461.1538461538466, "series": [{"data": [[1.71339096E12, 1622.3333333333333], [1.71339066E12, 533.0357142857141], [1.71339132E12, 304.6265060240962], [1.71339102E12, 1842.625], [1.7133912E12, 401.5641025641024], [1.7133909E12, 1417.3809523809523], [1.7133906E12, 434.08108108108104], [1.71339126E12, 455.20000000000005], [1.71339114E12, 2197.1538461538457], [1.71339084E12, 1233.12], [1.71339072E12, 727.9024390243902], [1.71339108E12, 1999.2857142857144], [1.71339078E12, 907.1212121212121]], "isOverall": false, "label": "Read WebID HTTP Request without Logging", "isController": false}, {"data": [[1.71339096E12, 1642.4210526315787], [1.71339066E12, 531.0892857142859], [1.71339132E12, 297.6190476190477], [1.71339102E12, 1896.3125], [1.7133912E12, 374.92207792207796], [1.7133909E12, 1420.857142857143], [1.7133906E12, 410.22222222222223], [1.71339126E12, 464.24615384615385], [1.71339114E12, 2461.1538461538466], [1.71339084E12, 1168.76], [1.71339072E12, 736.4878048780485], [1.71339108E12, 2214.857142857143], [1.71339078E12, 913.3636363636365]], "isOverall": false, "label": "Read WebID HTTP Request with Logging", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71339132E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.45783132530120485, "minX": 1.7133906E12, "maxY": 1.8378378378378382, "series": [{"data": [[1.71339096E12, 0.7777777777777777], [1.71339066E12, 0.7857142857142857], [1.71339132E12, 0.45783132530120485], [1.71339102E12, 0.9375], [1.7133912E12, 0.6794871794871795], [1.7133909E12, 0.761904761904762], [1.7133906E12, 1.8378378378378382], [1.71339126E12, 0.5846153846153848], [1.71339114E12, 0.6153846153846154], [1.71339084E12, 0.8400000000000001], [1.71339072E12, 0.5365853658536586], [1.71339108E12, 0.9285714285714286], [1.71339078E12, 0.6363636363636364]], "isOverall": false, "label": "Read WebID HTTP Request without Logging", "isController": false}, {"data": [[1.71339096E12, 0.5789473684210527], [1.71339066E12, 0.7499999999999998], [1.71339132E12, 0.595238095238095], [1.71339102E12, 0.625], [1.7133912E12, 0.7532467532467532], [1.7133909E12, 0.6666666666666667], [1.7133906E12, 0.7777777777777777], [1.71339126E12, 0.7384615384615386], [1.71339114E12, 0.6923076923076923], [1.71339084E12, 0.56], [1.71339072E12, 0.5609756097560975], [1.71339108E12, 1.0714285714285714], [1.71339078E12, 0.5757575757575759]], "isOverall": false, "label": "Read WebID HTTP Request with Logging", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71339132E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 132.0, "minX": 1.7133906E12, "maxY": 2840.0, "series": [{"data": [[1.71339096E12, 2171.0], [1.71339066E12, 1362.0], [1.71339132E12, 865.0], [1.71339102E12, 2121.0], [1.7133912E12, 2840.0], [1.7133909E12, 1661.0], [1.7133906E12, 1840.0], [1.71339126E12, 642.0], [1.71339114E12, 2640.0], [1.71339084E12, 1630.0], [1.71339072E12, 1370.0], [1.71339108E12, 2391.0], [1.71339078E12, 1565.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71339096E12, 1417.0], [1.71339066E12, 346.0], [1.71339132E12, 132.0], [1.71339102E12, 1636.0], [1.7133912E12, 309.0], [1.7133909E12, 1236.0], [1.7133906E12, 299.0], [1.71339126E12, 331.0], [1.71339114E12, 2002.0], [1.71339084E12, 1026.0], [1.71339072E12, 509.0], [1.71339108E12, 1856.0], [1.71339078E12, 629.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71339096E12, 1807.4], [1.71339066E12, 688.9000000000001], [1.71339132E12, 642.0], [1.71339102E12, 2062.7], [1.7133912E12, 413.80000000000007], [1.7133909E12, 1575.0], [1.7133906E12, 483.20000000000016], [1.71339126E12, 546.9], [1.71339114E12, 2633.5], [1.71339084E12, 1428.6], [1.71339072E12, 882.0], [1.71339108E12, 2315.0], [1.71339078E12, 1073.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71339096E12, 2171.0], [1.71339066E12, 1303.110000000002], [1.71339132E12, 844.9000000000003], [1.71339102E12, 2121.0], [1.7133912E12, 1545.2799999999947], [1.7133909E12, 1661.0], [1.7133906E12, 1840.0], [1.71339126E12, 631.1499999999999], [1.71339114E12, 2640.0], [1.71339084E12, 1630.0], [1.71339072E12, 1370.0], [1.71339108E12, 2391.0], [1.71339078E12, 1565.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71339096E12, 1625.0], [1.71339066E12, 509.5], [1.71339132E12, 167.0], [1.71339102E12, 1875.5], [1.7133912E12, 374.0], [1.7133909E12, 1409.0], [1.7133906E12, 418.0], [1.71339126E12, 452.0], [1.71339114E12, 2341.5], [1.71339084E12, 1165.0], [1.71339072E12, 721.5], [1.71339108E12, 2130.5], [1.71339078E12, 883.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71339096E12, 1854.2000000000005], [1.71339066E12, 762.4999999999998], [1.71339132E12, 712.6], [1.71339102E12, 2113.2], [1.7133912E12, 457.59999999999997], [1.7133909E12, 1622.2], [1.7133906E12, 552.9999999999997], [1.71339126E12, 576.5999999999999], [1.71339114E12, 2638.95], [1.71339084E12, 1493.6999999999996], [1.71339072E12, 972.4499999999999], [1.71339108E12, 2368.95], [1.71339078E12, 1089.6]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71339132E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 149.0, "minX": 1.0, "maxY": 1346.0, "series": [{"data": [[1.0, 1346.0], [2.0, 508.0], [4.0, 217.5], [3.0, 378.0], [6.0, 158.0], [7.0, 149.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[6.0, 330.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 7.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 149.0, "minX": 1.0, "maxY": 1346.0, "series": [{"data": [[1.0, 1346.0], [2.0, 508.0], [4.0, 217.5], [3.0, 378.0], [6.0, 158.0], [7.0, 149.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[6.0, 329.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 7.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.43333333333333335, "minX": 1.7133906E12, "maxY": 2.7666666666666666, "series": [{"data": [[1.71339096E12, 0.6166666666666667], [1.71339066E12, 1.8666666666666667], [1.71339132E12, 2.7666666666666666], [1.71339102E12, 0.5333333333333333], [1.7133912E12, 2.5833333333333335], [1.7133909E12, 0.7], [1.7133906E12, 1.2333333333333334], [1.71339126E12, 2.1666666666666665], [1.71339114E12, 0.43333333333333335], [1.71339084E12, 0.8333333333333334], [1.71339072E12, 1.3666666666666667], [1.71339108E12, 0.4666666666666667], [1.71339078E12, 1.1]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71339132E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7133906E12, "maxY": 2.7666666666666666, "series": [{"data": [[1.71339096E12, 0.6166666666666667], [1.71339066E12, 1.8666666666666667], [1.71339132E12, 2.7666666666666666], [1.71339102E12, 0.5333333333333333], [1.7133912E12, 2.5833333333333335], [1.7133909E12, 0.7], [1.7133906E12, 1.2166666666666666], [1.71339126E12, 2.1666666666666665], [1.71339114E12, 0.43333333333333335], [1.71339084E12, 0.8333333333333334], [1.71339072E12, 1.3666666666666667], [1.71339108E12, 0.4666666666666667], [1.71339078E12, 1.1]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71339132E12, 0.016666666666666666]], "isOverall": false, "label": "401", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71339132E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7133906E12, "maxY": 1.3833333333333333, "series": [{"data": [[1.71339096E12, 0.31666666666666665], [1.71339066E12, 0.9333333333333333], [1.71339132E12, 1.3833333333333333], [1.71339102E12, 0.26666666666666666], [1.7133912E12, 1.2833333333333334], [1.7133909E12, 0.35], [1.7133906E12, 0.6], [1.71339126E12, 1.0833333333333333], [1.71339114E12, 0.21666666666666667], [1.71339084E12, 0.4166666666666667], [1.71339072E12, 0.6833333333333333], [1.71339108E12, 0.23333333333333334], [1.71339078E12, 0.55]], "isOverall": false, "label": "Read WebID HTTP Request with Logging-success", "isController": false}, {"data": [[1.71339132E12, 0.016666666666666666]], "isOverall": false, "label": "Read WebID HTTP Request with Logging-failure", "isController": false}, {"data": [[1.71339096E12, 0.3], [1.71339066E12, 0.9333333333333333], [1.71339132E12, 1.3833333333333333], [1.71339102E12, 0.26666666666666666], [1.7133912E12, 1.3], [1.7133909E12, 0.35], [1.7133906E12, 0.6166666666666667], [1.71339126E12, 1.0833333333333333], [1.71339114E12, 0.21666666666666667], [1.71339084E12, 0.4166666666666667], [1.71339072E12, 0.6833333333333333], [1.71339108E12, 0.23333333333333334], [1.71339078E12, 0.55]], "isOverall": false, "label": "Read WebID HTTP Request without Logging-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71339132E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7133906E12, "maxY": 2.7666666666666666, "series": [{"data": [[1.71339096E12, 0.6166666666666667], [1.71339066E12, 1.8666666666666667], [1.71339132E12, 2.7666666666666666], [1.71339102E12, 0.5333333333333333], [1.7133912E12, 2.5833333333333335], [1.7133909E12, 0.7], [1.7133906E12, 1.2166666666666666], [1.71339126E12, 2.1666666666666665], [1.71339114E12, 0.43333333333333335], [1.71339084E12, 0.8333333333333334], [1.71339072E12, 1.3666666666666667], [1.71339108E12, 0.4666666666666667], [1.71339078E12, 1.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71339132E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71339132E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

